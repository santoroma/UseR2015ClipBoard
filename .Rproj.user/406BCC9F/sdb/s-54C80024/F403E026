{
    "contents" : "---\ntitle: \"UseR2015\"\nauthor: \"Mario Santoro\"\ndate: \"06 luglio 2015\"\noutput: ioslides_presentation\n---\n\n## Rcpp http://www.rcpp.org\n\nCodice Performante in C++ per R\n\nfoo.cpp \n```\n  #include <Rcpp.h>\n  using namespace Rcpp;\n  // [[Rcpp::export]]\n  NumericVector timesTwo(NumericVector x) {\n    return x * 2;\n  }\n```\n\n## sourceCpp()\n\n```{r,eval=TRUE}\nlibrary(Rcpp)\nsourceCpp(\"foo.cpp\")\ntimesTwo(2)\n```\n\n## Altre release specifiche di Rcpp\n[RcppArmadillo](http://dirk.eddelbuettel.com/code/rcpp.armadillo.html)\nUso di Rcpp con la libreria di linear algebra in C++ [Armadillo](http://arma.sf.net/) \n\n```   \n  #include <RcppArmadillo.h>\n```\n\n[RcppGSL](http://dirk.eddelbuettel.com/code/rcpp.gsl.html) interfaccia a [GNU GSL](http://www.gnu.org/software/gsl/)\n```\n  #include <RcppGSL.h>\n  #include <gsl/gsl_matrix.h>\n  #include <gsl/gsl_blas.h>\n```\n\n[RcppSMC](http://dirk.eddelbuettel.com/code/rcpp.smc.html) implementa Rcpp per  Sequential Monte Carlo and Particle Filters [(SMC)](http://www.jstatsoft.org/v30/i06)\n\n## Rcpp [Parallel](https://github.com/RcppCore/RcppParallel)\n```\n  #include <RcppParallel.h>\n```\n```\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n#include <algorithm>\n\n// [[Rcpp::export]]\ndouble vectorSum(NumericVector x) {\n  return std::accumulate(x.begin(), x.end(), 0.0);\n}\n\n```\n\n## Rcpp [Parallel](https://github.com/RcppCore/RcppParallel)\n```\n// [[Rcpp::depends(RcppParallel)]]\n#include <RcppParallel.h>\n#include <Rcpp.h>\nusing namespace RcppParallel;\nstruct Sum : public Worker\n{   \n  // source vector\n  const RVector<double> input;\n  // accumulated value\n  double value;\n  // constructors\n  Sum(const Rcpp::NumericVector input) : input(input), value(0) {}\n  Sum(const Sum& sum, Split) : input(sum.input), value(0) {}\n  // accumulate just the element of the range I've been asked to\n  void operator()(std::size_t begin, std::size_t end) {\n    value += std::accumulate(input.begin() + begin, input.begin() + end, 0.0);\n  }\n  // join my value with that of another Sum\n  void join(const Sum& rhs) { \n    value += rhs.value; \n  }\n};\n```\n\n## Rcpp [Parallel](https://github.com/RcppCore/RcppParallel)\n\n```\nusing namespace RcppParallel;\n// [[Rcpp::export]]\ndouble parallelVectorSum(Rcpp::NumericVector x) {\n  // declare the SumBody instance \n  Sum sum(x);\n  // call parallel_reduce to start the work\n  parallelReduce(0, x.length(), sum);\n  // return the computed sum\n  return sum.value;\n}\n```\n\n## Rcpp [Parallel](https://github.com/RcppCore/RcppParallel)\n```{r,eval=TRUE}\nlibrary(RcppParallel)\nsourceCpp(\"foo_ser.cpp\")\nsourceCpp(\"foo_par.cpp\")\nlibrary(rbenchmark)\nv <- as.numeric(c(1:10000000))\npp <- benchmark(vectorSum(v),parallelVectorSum(v),order=\"relative\")\npp\n```\n\n## RInside [rinside.html](http://dirk.eddelbuettel.com/code/rinside.html)\nR embedded in classi C++\n```\n  #include <RInside.h>\n```\n\nPacchetto giovane, alle versione 0.2, ma promettente ...\n\n```\n#include <RInside.h>   // for the embedded R via RInside\n\nint main(int argc, char *argv[]) {\n\n    RInside R(argc, argv);  // create an embedded R instance\n\n    R[\"txt\"] = \"Hello, world!\\n\";\t// assign a char* (string) to 'txt'\n\n    R.parseEvalQ(\"cat(txt)\"); // eval the init string, ignoring any returns\n\n    exit(0);\n}\n```\n\n\n## [HTMLWIDGETS](http://www.htmlwidgets.org)\nWidgets interattivi costruiti con R e javascript\nGi√† ci sono alcuni paccheti di R che implementano librerie js\n\nesempi con questo dataset\n```{r,echo=FALSE}\n\nlibrary(dplyr,quietly = T,warn.conflicts = F)\nlibrary(gplots,quietly = T,warn.conflicts = F)\nlibrary(zoo,quietly = T,warn.conflicts = F)\nlibrary(xts,quietly = T,warn.conflicts = F)\nlibrary(reshape2,quietly = T,warn.conflicts = F)\n\n# Slurp up ./data/*.csv into one data frame\ndownloads <- do.call(rbind, lapply(list.files(\"./ggbrush/data\", full.names = TRUE), read.csv, stringsAsFactors = FALSE))\n# Round time to nearest hour\ndownloads <- downloads %>% mutate(hour = sub(\":.*\", \":00\", time)) %>% tbl_df()\n\n# Counts per date/hour by country\ncounts_by_country <- downloads %>%\n  count(date, hour, country) %>%\n  arrange(date, hour, country)\n#counts_by_country\n\n# Counts per date/hour, all countries combined\ncounts <- counts_by_country %>%\n  group_by(date, hour) %>%\n  summarise(n = sum(n))\n#counts\n\n# Countries with at least 300 downloads\nmajor_countries <- (downloads %>% count(country) %>% filter(n > 300))$country\n\n# Make a matrix of countries vs. hours\nm_hours_countries <- counts_by_country %>%\n  filter(country %in% major_countries) %>%\n  group_by(hour, country) %>%\n  summarise(n = sum(n)) %>%\n  arrange(hour, country) %>%\n  acast(hour ~ country, value.var = 'n', fill = 0)\n```\nScaricamenti prari di pacchetti R per nazione\n```{r,}\nm_hours_countries[1:4,1:10]\n```\n\n## [dygrhaps](http://dygraphs.com)\nLibreria per serie temporali\n```{r,echo=FALSE}\nlibrary(dygraphs)\n# Turn into time series\ntimes <- paste0(counts$date, \" \", counts$hour, \":00 UTC\") %>% as.POSIXct()\nts_times <- xts(counts$n, order.by = times, frequency = 24)\n#Plot\ndg <- dygraph(ts_times) %>%\n  dyAxis(\"y\", \"Downloads\") %>%\n  dyAxis(\"x\", \"Date\")\ndg %<>% dyRangeSelector() %>% dyAnnotation(as.POSIXct(\"2015-05-17 19:00\"), \"A\") %>%\n  dyShading(as.POSIXct(\"2015-05-17 05:00\"),\n    as.POSIXct(\"2015-05-18 09:00\")) %>%\n  dyRoller()\ndg\n```\n\n## [d3hetamap](https://github.com/rstudio/d3heatmap)\nHeatmap usando D3\n```{r,fig.height=3}\nlibrary(d3heatmap)\nm_counts <- t(acast(counts, date ~ hour, value.var = 'n'))\nd3heatmap(scale(m_hours_countries), cellnote = m_hours_countries,\n  colors = \"Blues\", dendrogram = \"col\")\n```\n\n## [leaflet](http://leafletjs.com)\nMappe interattive\n```{r,eval=F}\nlibrary(leaflet)\nleaflet(quakes) %>%\n  addTiles(\"https://api.tiles.mapbox.com/v4/mapbox.wheatpaste/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoic2FudG9yb21hIiwiYSI6ImUxN2ZkZWRkNTU2NjVlZjRiM2E2ZmZhNGQyODM0OGFhIn0.mM32XaR8Ro0dBQIlA6G2iA\") %>%\n  addCircles(color = \"#CC0000\", weight = 2, radius = ~10^mag / 5,\n    popup = ~as.character(stations))\n```\n\n## [leaflet](http://leafletjs.com)\nMappe interattive\n```{r,echo=F}\nlibrary(leaflet)\nleaflet(quakes) %>%\n  addTiles(\"https://api.tiles.mapbox.com/v4/mapbox.wheatpaste/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoic2FudG9yb21hIiwiYSI6ImUxN2ZkZWRkNTU2NjVlZjRiM2E2ZmZhNGQyODM0OGFhIn0.mM32XaR8Ro0dBQIlA6G2iA\") %>%\n  addCircles(color = \"#CC0000\", weight = 2, radius = ~10^mag / 5,\n    popup = ~as.character(stations))\n```\n\n## [threejs globe](http://threejs.org)\nLibreria 3D in javascript\n```{r,}\nlibrary(threejs)\nglobejs(lat = quakes$lat, long = quakes$long, \n        value = 10^quakes$mag / 10^4,atmosphere = TRUE)\n```\n\n## [epiwidgets](https://github.com/sdwfrost/epiwidgets)\nTree Viewer in js D3\n```{r,eval=F}\n# devtools::install_github(\"sdwfrost/epiwidgets\")\nlibrary(epiwidgets)\nnwk <- \"(((EELA:0.150276,CONGERA:0.213019):0.230956,(EELB:0.263487,CONGERB:0.202633):0.246917):0.094785,((CAVEFISH:0.451027,(GOLDFISH:0.340495,ZEBRAFISH:0.390163):0.220565):0.067778,((((((NSAM:0.008113,NARG:0.014065):0.052991,SPUN:0.061003,(SMIC:0.027806,SDIA:0.015298,SXAN:0.046873):0.046977):0.009822,(NAUR:0.081298,(SSPI:0.023876,STIE:0.013652):0.058179):0.091775):0.073346,(MVIO:0.012271,MBER:0.039798):0.178835):0.147992,((BFNKILLIFISH:0.317455,(ONIL:0.029217,XCAU:0.084388):0.201166):0.055908,THORNYHEAD:0.252481):0.061905):0.157214,LAMPFISH:0.717196,((SCABBARDA:0.189684,SCABBARDB:0.362015):0.282263,((VIPERFISH:0.318217,BLACKDRAGON:0.109912):0.123642,LOOSEJAW:0.397100):0.287152):0.140663):0.206729):0.222485,(COELACANTH:0.558103,((CLAWEDFROG:0.441842,SALAMANDER:0.299607):0.135307,((CHAMELEON:0.771665,((PIGEON:0.150909,CHICKEN:0.172733):0.082163,ZEBRAFINCH:0.099172):0.272338):0.014055,((BOVINE:0.167569,DOLPHIN:0.157450):0.104783,ELEPHANT:0.166557):0.367205):0.050892):0.114731):0.295021)\"\ntreewidget(nwk)\n```\n\n## [epiwidgets](https://github.com/sdwfrost/epiwidgets)\nTree Viewer in js D3\n```{r,echo=F}\n# devtools::install_github(\"sdwfrost/epiwidgets\")\nlibrary(epiwidgets,quietly = T,warn.conflicts = F)\nnwk <- \"(((EELA:0.150276,CONGERA:0.213019):0.230956,(EELB:0.263487,CONGERB:0.202633):0.246917):0.094785,((CAVEFISH:0.451027,(GOLDFISH:0.340495,ZEBRAFISH:0.390163):0.220565):0.067778,((((((NSAM:0.008113,NARG:0.014065):0.052991,SPUN:0.061003,(SMIC:0.027806,SDIA:0.015298,SXAN:0.046873):0.046977):0.009822,(NAUR:0.081298,(SSPI:0.023876,STIE:0.013652):0.058179):0.091775):0.073346,(MVIO:0.012271,MBER:0.039798):0.178835):0.147992,((BFNKILLIFISH:0.317455,(ONIL:0.029217,XCAU:0.084388):0.201166):0.055908,THORNYHEAD:0.252481):0.061905):0.157214,LAMPFISH:0.717196,((SCABBARDA:0.189684,SCABBARDB:0.362015):0.282263,((VIPERFISH:0.318217,BLACKDRAGON:0.109912):0.123642,LOOSEJAW:0.397100):0.287152):0.140663):0.206729):0.222485,(COELACANTH:0.558103,((CLAWEDFROG:0.441842,SALAMANDER:0.299607):0.135307,((CHAMELEON:0.771665,((PIGEON:0.150909,CHICKEN:0.172733):0.082163,ZEBRAFINCH:0.099172):0.272338):0.014055,((BOVINE:0.167569,DOLPHIN:0.157450):0.104783,ELEPHANT:0.166557):0.367205):0.050892):0.114731):0.295021)\"\ntreewidget(nwk)\n```\n\n## Thematic Maps [tmap](https://github.com/mtennekes/tmap)\n```{r}\nlibrary(tmap,quietly = T,warn.conflicts = F)\ndata(World)\ndata(metro)\nqtm(World, fill=\"pop_est_dens\", theme=\"World\", fill.style=\"kmeans\", \n    fill.title=\"Population per km^2\") +\n  qtm(metro, bubble.size = \"pop2010\", bubble.col =\"purple\", \n      bubble.title.size=\"Metropolitan Areas\", theme = \"World\", bubble.scale=.5)\n```\n\n",
    "created" : 1436261700694.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3078387614",
    "id" : "F403E026",
    "lastKnownWriteTime" : 1436263185,
    "path" : "~/UseR2015/UseR2015ClipBoard/UseR2015.Rmd",
    "project_path" : "UseR2015.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_markdown"
}